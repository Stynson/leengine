
from psd_tools import PSDImage
import pystache
import os, re, sys, codecs, argparse

c_template = r"""// hey, it's autogenerated! :)
#pragma once
#include "render.h"

typedef struct
{
	{{#imgs}}
	tex_t {{name}};
	{{/imgs}}
} {{prefix}}_scene_t;

static {{prefix}}_scene_t {{prefix}}_load()
{
	{{prefix}}_scene_t ret = {0};
	{{#imgs}}
	ret.{{name}} = r_load("{{location}}/{{path}}", TEX_FLAGS_NONE);
	{{/imgs}}
	return ret;
}

static void {{prefix}}_free({{prefix}}_scene_t s)
{
	{{#imgs}}
	r_free(s.{{name}});
	{{/imgs}}
}

static void {{prefix}}_draw({{prefix}}_scene_t s, float x, float y)
{
	{{#imgs}}
	r_render(s.{{name}}, {{x}} + x, {{y}} + y, 0);
	{{/imgs}}
}
"""

class Slicer:
	def __init__(self):
		self.imgs = []
		self.idents = set()
		self.ignored_layers = set()
		self.images_output_folder = None
		self.images_scale_factor = 1.0
		self.scene_scale_factor = 1.0

	def _get_name(self, plane, parent_name):
		raw_name = plane.name if hasattr(plane, "name") else ""
		name = raw_name
		name = re.sub('[^0-9a-zA-Z_]', '', name) # now try to clean up name
		name = re.sub('^[^a-zA-Z_]+', '', name)
		if len(name) == 0: 
			name = "_unknown%i" % len(self.imgs) # generate a new name if it's empty
		name = parent_name + name # add parent
		if name in self.idents: # add sufix if needed
			k = 0
			while name + "_" + str(k) in self.idents:
				k += 1
			name = name + "_" + str(k)
		return (raw_name, name)

	def _export(self, plane, parent_name = ""):
		raw_name, name = self._get_name(plane, parent_name)
		if raw_name in self.ignored_layers: # first check if it's ignored
			return
		self.idents.add(name)
		if hasattr(plane, "layers"):
			for layer in plane.layers:
				self._export(layer, name if raw_name else parent_name)
		elif plane.visible:
			try:
				filename = name + ".png"

				img = plane.as_PIL()
				img = img.resize([int(self.images_scale_factor * s) for s in img.size])
				img.save(os.path.join(self.images_output_folder, filename))

				self.imgs.append({
					"x": self.scene_scale_factor * (plane.bbox.x1 + plane.bbox.width / 2),
					"y": self.scene_scale_factor * (- plane.bbox.height / 2 - plane.bbox.y1),
					"w": self.scene_scale_factor * plane.bbox.width,
					"h": self.scene_scale_factor * plane.bbox.height,
					"name": name,
					"path": filename
				})
			except Exception as e:
				print("failed to save image '%s' because '%s'" % (filename, str(e)))

	def slice(self, prefix, psd_filename, images_output_folder, source_output_folder, images_path_from_source, images_scale_factor = 1.0, scene_scale_factor = None, ignored_layers = set()):
		self.imgs = []
		self.idents = set()
		self.images_output_folder = images_output_folder
		self.images_scale_factor = images_scale_factor
		self.scene_scale_factor = scene_scale_factor if scene_scale_factor else images_scale_factor
		self.ignored_layers = ignored_layers

		try:
			os.mkdir(images_output_folder)
		except:
			pass

		try:
			os.mkdir(source_output_folder)
		except:
			pass

		plane = PSDImage.load(psd_filename)
		if not plane:
			raise ValueError("failed to load %s" % psd_filename)
		self._export(plane)
		self.imgs.reverse()

		data = {
			"prefix": prefix,
			"location": images_path_from_source,
			"imgs": self.imgs
		}
		with codecs.open(os.path.join(source_output_folder, "%s_scene.h" % prefix), "w", "utf-8") as f:
			f.write(pystache.render(c_template, data))

parser = argparse.ArgumentParser(description = "Slice dat psd good yolo")
parser.add_argument("-p", "--psd",  required = True, help = "input psd file")
parser.add_argument("-n", "--name", required = True, help = "prefix identifier name for the source")
parser.add_argument("-i", "--imgs", required = True, help = "directory where to put images")
parser.add_argument("-s", "--src",  required = True, help = "directory where to put source")
parser.add_argument("-r", "--rel",  required = True, help = "relative path from source code to images")
parser.add_argument("-t", "--scale", default = 1.0, type = float, help = "scale factor for images")
parser.add_argument("-z", "--scene-scale", type = float, help = "scale factor for the scene")
parser.add_argument("--ignore", action = "append", default = [], help = "ignore layer with name")
args = vars(parser.parse_args())

Slicer().slice(
	args.get("name"),
	args.get("psd"),
	args.get("imgs"),
	args.get("src"),
	args.get("rel"),
	args.get("scale"),
	args.get("scene_scale"),
	set(args.get("ignore")))
